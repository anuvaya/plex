---
description:
globs:
alwaysApply: false
---
# Plex Payment Module - API Design Guide

## TypeScript Interface Standards

### Core Payment App Interface
When working with payment app data, always use the comprehensive `PaymentApp` interface:

```typescript
interface PaymentApp {
  packageName: string;          // com.paytm.mobile
  displayName: string;          // "Paytm - Payments & Financial Services"
  shortName: string;            // "Paytm"
  version: string;              // "11.5.6"
  icon: string;                 // base64 encoded or file URI
  category: PaymentCategory;    // UPI, WALLET, CARD, BNPL
  supportedCountries: string[]; // ["IN", "NP", "BD"]
  supportedCurrencies: string[];// ["INR", "USD"]
  securityScore: number;        // 0-100 based on verification
  isVerified: boolean;          // Passed all security checks
  installationSource: string;   // "play_store", "app_store", "unknown"
  lastUpdated: Date;            // App last update date
  permissions: string[];        // Requested permissions
}
```

### Current Type Definitions Location
The main types are defined in [src/Plex.types.ts](mdc:src/Plex.types.ts), but this file needs complete overhaul to support the new payment functionality. Current types are basic template placeholders.

## API Method Patterns

### Async Function Naming
- **Detection**: `getInstalledPaymentApps()`, `getPaymentContext()`
- **Information**: `getAppDetails()`, `getAppIcon()`, `getCountryCode()`
- **Security**: `verifyAppSecurity()`, `getDeviceSecurityStatus()`
- **Regional**: `getRecommendedApps()`, `getPopularApps()`

### Error Handling Pattern
All methods should return Promises with proper error handling:
```typescript
async getInstalledPaymentApps(): Promise<PaymentApp[]> {
  try {
    // Implementation
  } catch (error) {
    throw new PlexError('DETECTION_FAILED', error.message);
  }
}
```

### Event Naming Convention
- **App Changes**: `onPaymentAppsChanged`
- **Security Alerts**: `onSecurityAlert`
- **Regional Updates**: `onRegionalDataUpdated`

## Payment Categories Enum
```typescript
enum PaymentCategory {
  UPI = "upi",                  // Unified Payments Interface (India)
  WALLET = "wallet",            // Digital wallets
  CARD = "card",                // Credit/Debit card apps
  BANK = "bank",                // Banking apps
  BNPL = "bnpl",                // Buy Now Pay Later
  CRYPTO = "crypto",            // Cryptocurrency
  P2P = "p2p"                   // Peer-to-peer payments
}
```

## Regional Data Structures
```typescript
interface LocationContext {
  countryCode: string;          // ISO 3166-1 alpha-2 (US, IN, GB)
  currencyCode: string;         // ISO 4217 (USD, INR, GBP)
  localeIdentifier: string;     // en_US, hi_IN, es_ES
  timezone: string;             // America/New_York, Asia/Kolkata
}

interface PaymentContext {
  installedApps: PaymentApp[];
  countryCode: string;
  currencyCode: string;
  locale: string;
  recommendedApps: PaymentApp[];
  securityWarnings: SecurityWarning[];
  deviceSecurityStatus: DeviceSecurityInfo;
}
```

## Security Interface Standards
```typescript
interface SecurityChecks {
  signatureVerification: boolean;      // App signature validation
  packageIntegrity: boolean;          // APK/IPA integrity check
  knownMalwareCheck: boolean;         // Malware database check
  playStoreVerification: boolean;     // Android - Play Store origin
  appStoreVerification: boolean;      // iOS - App Store verification
  lastSecurityScan: Date;             // Security scan timestamp
}

interface DeviceSecurityInfo {
  isRooted: boolean;                  // Android root detection
  isJailbroken: boolean;              // iOS jailbreak detection
  hasDebuggerAttached: boolean;       // Runtime debugging detection
  isDeveloperOptionsEnabled: boolean; // Android developer options
  securityPatchLevel: string;         // Device security patch level
  trustScore: number;                 // Overall device trust score (0-100)
}
```

## Native Module Interface
The main module interface should be implemented in [src/PlexModule.ts](mdc:src/PlexModule.ts):

```typescript
declare class PlexModule extends NativeModule<PlexModuleEvents> {
  // Core Detection
  getInstalledPaymentApps(): Promise<PaymentApp[]>;
  getPaymentContext(): Promise<PaymentContext>;
  getCountryCode(): Promise<string>;
  getCurrencyCode(): Promise<string>;

  // App Information
  getAppDetails(packageName: string): Promise<PaymentApp | null>;
  getAppIcon(packageName: string, size?: number): Promise<string>;
  getAppsByCategory(category: PaymentCategory): Promise<PaymentApp[]>;

  // Security
  verifyAppSecurity(packageName: string): Promise<SecurityChecks>;
  getDeviceSecurityStatus(): Promise<DeviceSecurityInfo>;
  isDeviceSecure(): Promise<boolean>;

  // Regional Data
  getRecommendedApps(countryCode: string): Promise<PaymentApp[]>;
  getPopularApps(countryCode: string, limit?: number): Promise<PaymentApp[]>;
  getSupportedCurrencies(countryCode: string): Promise<string[]>;

  // Utilities
  refreshAppList(): Promise<void>;
  clearCache(): Promise<void>;
}
```

## Event System Design
```typescript
type PlexModuleEvents = {
  onPaymentAppsChanged: (apps: PaymentApp[]) => void;
  onSecurityAlert: (alert: SecurityAlert) => void;
  onRegionalDataUpdated: (context: PaymentContext) => void;
  onDeviceSecurityChanged: (status: DeviceSecurityInfo) => void;
};
```

## Data Validation Patterns
Always validate input data for security:
```typescript
function validatePackageName(packageName: string): boolean {
  // Validate package name format
  const packageNameRegex = /^[a-zA-Z][a-zA-Z0-9_]*(\.[a-zA-Z][a-zA-Z0-9_]*)*$/;
  return packageNameRegex.test(packageName);
}

function validateCountryCode(countryCode: string): boolean {
  // Validate ISO 3166-1 alpha-2 format
  return /^[A-Z]{2}$/.test(countryCode);
}
```

## Error Handling Standards
```typescript
class PlexError extends Error {
  constructor(
    public code: string,
    public message: string,
    public details?: any
  ) {
    super(message);
    this.name = 'PlexError';
  }
}

// Error codes
enum PlexErrorCode {
  DETECTION_FAILED = 'DETECTION_FAILED',
  SECURITY_CHECK_FAILED = 'SECURITY_CHECK_FAILED',
  DEVICE_NOT_SECURE = 'DEVICE_NOT_SECURE',
  INVALID_PACKAGE_NAME = 'INVALID_PACKAGE_NAME',
  PERMISSION_DENIED = 'PERMISSION_DENIED',
  NETWORK_ERROR = 'NETWORK_ERROR'
}
```

## Performance Considerations
- **Caching**: Cache payment app data with TTL
- **Lazy Loading**: Only load app icons when needed
- **Background Processing**: Use native threads for heavy operations
- **Memory Management**: Dispose of large icon data properly

## Platform-Specific Considerations

### Android Implementation
- Use `PackageManager.getInstalledApplications()` for app detection
- Check `ApplicationInfo.flags` for installation source
- Verify signatures using `PackageManager.getPackageInfo()`

### iOS Implementation
- Use URL schemes for app detection (limited)
- Check LSApplicationWorkspace for installed apps (private API)
- Verify bundle signatures using Security framework

### Web Fallback
- Limited detection capabilities
- Use navigator.userAgent for basic region detection
- Graceful degradation for unsupported features

## API Usage Examples
```typescript
// Basic usage
const context = await Plex.getPaymentContext();
const apps = context.installedApps.filter(app => app.isVerified);

// Security-conscious usage
const securityStatus = await Plex.getDeviceSecurityStatus();
if (securityStatus.trustScore > 70) {
  const verifiedApps = await Promise.all(
    apps.map(async app => {
      const security = await Plex.verifyAppSecurity(app.packageName);
      return security.signatureVerification ? app : null;
    })
  );
}
```

This API design prioritizes security, performance, and cross-platform consistency while maintaining type safety throughout the payment detection process.
